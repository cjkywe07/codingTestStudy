# 07 More

1. 동적계획법(DP; Dynamic Programming)

문제에 대한 정답이 될 가능성이 있는 모든 해결책을
"체계적"이고 "효율적"으로 탐색하는 풀이법

탐색 방법
    (1) 크고 복잡한 문제를 작은 문제들로 나눈다. (subproblem - 하위 문제)

    (2) 하위 문제의 답을 계산한다.
        - 근데 중복 계산해야 하는 하위 문제가 있을 수 있다.
          (overlapping subproblem - 중복 하위 문제)

        - 따라서 한 번 계산한 결과는 메모리에 저장하여 재계산 하지 않도록 한다.
          -> 속도 향상 (Top-down : memorization / Bottom-up : tabulation - dp table)

    (3) 하위 문제에 대한 답을 통해 원래 문제에 대한 답을 계산한다.
        (optimal substructure = 최적 부분 구조)

        최적 부분 구조
            하위 부분 문제에서 구한 최적의 답이 합쳐졌을 때, 원래의 큰 문제의 최적의 답을 구할 수 있는 구조

정리
    DP
        크고 복잡한 문제를 작게 나누고
        중복되는 문제라면 한 번 계산한 결과 값을 저장해놓고 재사용함으로써
        문제를 효율적으로 해결하는 알고리즘

    문제 풀이
        특정한 문제를 완전 탐색 알고리즘으로 접근해보고,
        시간복잡도가 너무 높다면 DP를 적용할 수 있는지 생각
        subproblem의 중복 여부를 판단하는 것이 첫 번째 순서

    구현 방법
        (1) 일단 재귀함수로 비효율적인 완전탐색 코드 작성
        (2) 중복되는 subproblem의 계산 결과를 저장(memorize)
        (3) Top-down -> Bottom-up 으로 코드 전환을 고려

            Top-down
                재귀 사용 -> 구현시간 빠름
                재귀풀이에서 중복되는 계산값을 저장하여(memorize) 동일한 함수 호출 시 사용
                hashtable 또는 list에 계산 결과를 저장

            Bottom-up
                반복문 사용 -> 실행시간 빠름
                더 작은 subproblem에 대한 계산 결과를 DP table에 저장하여 더 큰 문제의 계산에 활용
                hashtable 또는 list에 계산 결과를 저장

문제 적용
    - base case
    - recurrence relation (점화식 / 재귀 관계식)

    ex) Optimal value(최대, 최소), 방법의 개수 등을 구할 때
        - ~의 최소 비용은?
        - ~의 최대 이익은?
        - What is the longest possible...
        - 특정 지점에 도달할 수 있는지?
        - ~를 하는 방법의 개수는?
